================ FILE: PSJF.c ================
 #include <stdio.h>
#include <stdbool.h>

#define MAX 30

int main() {
    int n, i, j;
    int p[MAX], at[MAX], bt[MAX], ct[MAX], tat[MAX], wt[MAX], remaining_bt[MAX];
    bool is_completed[MAX] = {false};
    int time = 0, completed = 0;
    float awt = 0, atat = 0;

    int gantt_process[MAX * 2], gantt_time[MAX * 2], gantt_count = 0;

    // Input: Number of Processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Taking input for process numbers
    printf("Enter the process numbers: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &p[i]);
    }

    // Taking input for arrival times of processes
    printf("Enter the arrival time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &at[i]);
    }

    // Taking input for burst times of processes
    printf("Enter the burst time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
        remaining_bt[i] = bt[i]; // Initialize remaining burst time
    }

    // Sorting processes based on arrival time using Bubble Sort
    for (i = 0; i < n - 1; i++) { 
        for (j = 0; j < n - i - 1; j++) { 
            if (at[j] > at[j + 1]) { 
                // Swap arrival times
                int temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                // Swap burst times
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                // Swap remaining burst times
                temp = remaining_bt[j];
                remaining_bt[j] = remaining_bt[j + 1];
                remaining_bt[j + 1] = temp;

                // Swap process IDs to maintain order
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }

    int prev_process = -1;

    // Preemptive SJF Scheduling (SRTF)
    while (completed != n) {
        int min_index = -1;
        int min_bt = 9999;

        // Find the process with the shortest remaining burst time that has arrived
        for (i = 0; i < n; i++) {
            if (at[i] <= time && !is_completed[i] && remaining_bt[i] < min_bt) {
                min_bt = remaining_bt[i];
                min_index = i;
            }
        }

        if (min_index == -1) {
            // No process available to execute, move time forward
            if (prev_process != -1) {
                gantt_process[gantt_count] = -1; // Represent idle time
                gantt_time[gantt_count++] = time;
            }
            time++;
            continue;
        }

        // Record Gantt Chart execution
        if (prev_process != p[min_index]) {
            gantt_process[gantt_count] = p[min_index];
            gantt_time[gantt_count++] = time;
        }

        // Execute the process for 1 unit of time
        remaining_bt[min_index]--;
        time++;

        // If the process completes execution
        if (remaining_bt[min_index] == 0) {
            ct[min_index] = time;  // Store completion time
            is_completed[min_index] = true;
            completed++;
        }

        prev_process = p[min_index];
    }

    // Calculate Turnaround Time (TAT) and Waiting Time (WT)
    for (i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i]; // TAT = CT - AT
        atat += tat[i];

        wt[i] = tat[i] - bt[i]; // WT = TAT - BT
        awt += wt[i];
    }

    // Calculate average waiting time and turnaround time
    awt /= n;
    atat /= n;

    // Display results
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) { 
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    // Printing average values
    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", atat);

    // Print Gantt Chart
    printf("\nGantt Chart:\n");

    // Print upper border
    printf(" ");
    for (i = 0; i < gantt_count; i++) {
        printf("--------");
    }
    printf("\n|");

    // Print process execution
    for (i = 0; i < gantt_count; i++) {
        if (gantt_process[i] == -1) {
            printf(" Idle  |");
        } else {
            printf(" P%d  |", gantt_process[i]);
        }
    }

    // Print lower border
    printf("\n ");
    for (i = 0; i < gantt_count; i++) {
        printf("--------");
    }

    // Print timeline
    printf("\n0");
    for (i = 0; i < gantt_count; i++) {
        printf("\t%d", gantt_time[i]);
    }
    printf("\n");

    return 0;
}

================ FILE: RR.c ================
 #include <stdio.h> 
#define MAX 30 
 
int main()  
{ 
    int n, i, j, quantum; 
    int p[MAX], at[MAX], bt[MAX], ct[MAX], tat[MAX], wt[MAX], remaining_bt[MAX]; 
    int time = 0, completed = 0; 
    float awt = 0, atat = 0; 
 
    // Input: Number of Processes 
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
 
    // Taking input for process numbers 
    printf("Enter the process numbers: "); 
    for (i = 0; i < n; i++) 
     { 
        scanf("%d", &p[i]); 
    } 
 
    // Taking input for arrival times of processes 
    printf("Enter the arrival time for each process: "); 
    for (i = 0; i < n; i++)  
    { 
        scanf("%d", &at[i]); 
    } 
 
    // Taking input for burst times of processes 
    printf("Enter the burst time for each process: "); 
    for (i = 0; i < n; i++) 
     { 
        scanf("%d", &bt[i]); 
        remaining_bt[i] = bt[i]; // Initialize remaining burst time 
    } 
 
    // Taking time quantum input 
    printf("Enter the time quantum: "); 
    scanf("%d", &quantum); 
  
    // Round Robin Scheduling 
    int queue[MAX], front = 0, rear = 0; 
    int visited[MAX] = {0}; // To track if a process is already in queue 
 
    queue[rear++] = 0; // Start with the first process 
    visited[0] = 1; 
 
    while (completed != n) 
     { 
        int index = queue[front++]; 
         
        // Execute the process for `quantum` or remaining burst time 
        int exec_time = (remaining_bt[index] > quantum) ? quantum : remaining_bt[index]; 
        time += exec_time; 
        remaining_bt[index] -= exec_time; 
 
        // Check if new processes have arrived and add them to the queue 
        for (i = 0; i < n; i++)  
        { 
            if (at[i] <= time && !visited[i] && remaining_bt[i] > 0) 
             { 
                queue[rear++] = i; 
                visited[i] = 1; 
            } 
        } 
 
        // If process is not completed, put it back in queue 
        if (remaining_bt[index] > 0)  
        { 
            queue[rear++] = index; 
        }  
        else  
        { // If process is completed, store completion time 
            ct[index] = time; 
            completed++; 
        } 
    } 
 
    // Calculate Turnaround Time (TAT) and Waiting Time (WT) 
    for (i = 0; i < n; i++)  
    { 
        tat[i] = ct[i] - at[i]; // TAT = CT - AT 
        atat += tat[i]; 
 
        wt[i] = tat[i] - bt[i]; // WT = TAT - BT 
        awt += wt[i]; 
    } 
 
    // Calculate average waiting time and turnaround time 
    awt /= n; 
    atat /= n; 
 
    // Display results 
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n"); 
    for (i = 0; i < n; i++) 
     {  
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], ct[i], tat[i], wt[i]); 
    } 
 
    // Printing average values 
    printf("\nAverage Waiting Time: %.2f", awt); 
    printf("\nAverage Turnaround Time: %.2f\n", atat); 
 
    return 0; 
} 

================ FILE: FCFS.c ================
#include <stdio.h>

#define MAX 30

int main() 
{
    int n, i, j;
    int p[MAX], at[MAX], bt[MAX], ct[MAX], wt[MAX], tat[MAX];
    float awt = 0, atat = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the process numbers: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &p[i]);
    }

    
    printf("Enter the arrival time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &at[i]);
    }

    
    printf("Enter the burst time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
    }

    
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1]) {
              
                int temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }

    int time = 0;
    for (i = 0; i < n; i++) {
        if (time < at[i]) {
            time = at[i]; 
        }
        time += bt[i]; 
        ct[i] = time;  
    }

   
    for (i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        atat += tat[i];

        wt[i] = tat[i] - bt[i]; 
        awt += wt[i];
    }

   
    awt /= n;
    atat /= n;

    
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    
    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", atat);

   
    printf("\nGantt Chart:\n");

    
    printf(" ");
    for (i = 0; i < n; i++) {
        printf("-------");
    }
    printf("\n|");

    
    time = 0;
    for (i = 0; i < n; i++) {
        if (time < at[i]) {
            printf(" Idle |");
            time = at[i];
        }
        printf(" P%d |", p[i]);
        time += bt[i];
    }

    
    printf("\n ");
    for (i = 0; i < n; i++) {
        printf("-------");
    }

   
    printf("\n0");
    time = 0;
    for (i = 0; i < n; i++) {
        if (time < at[i]) {
            printf("\t%d", at[i]);
            time = at[i];
        }
        time += bt[i];
        printf("\t%d", time);
    }
    printf("\n");

    return 0;
}
================ FILE: PPS.c ================
#include <stdio.h>
#include <limits.h>

#define MAX 30

int main() {
    int n, i;
    int p[MAX], at[MAX], bt[MAX], ct[MAX], wt[MAX], tat[MAX], priority[MAX], remaining_bt[MAX];
    int completed = 0, time = 0, minPriority, idx;
    float awt = 0, atat = 0;
    int isCompleted[MAX] = {0}; 
    int ganttChart[MAX * 2], ganttTime[MAX * 2], gcIndex = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter process numbers: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &p[i]);
    }

    printf("Enter arrival time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &at[i]);
    }

    printf("Enter burst time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
        remaining_bt[i] = bt[i];  // Initialize remaining burst time
    }

    printf("Enter priority for each process (lower number = higher priority): ");
    for (i = 0; i < n; i++) {
        scanf("%d", &priority[i]);
    }

    // Start processing
    while (completed < n) {
        minPriority = INT_MAX;
        idx = -1;

        // Find the highest-priority process that has arrived
        for (i = 0; i < n; i++) {
            if (at[i] <= time && !isCompleted[i] && priority[i] < minPriority) {
                minPriority = priority[i];
                idx = i;
            }
        }

        if (idx == -1) {
            time++; // If no process is available, increase time (CPU idle)
        } else {
            // Store process execution in Gantt Chart
            if (gcIndex == 0 || ganttChart[gcIndex - 1] != p[idx]) {
                ganttChart[gcIndex] = p[idx];
                ganttTime[gcIndex] = time;
                gcIndex++;
            }

            remaining_bt[idx]--; // Execute the process for 1 unit of time
            time++; 

            // If the process finishes execution
            if (remaining_bt[idx] == 0) {
                ct[idx] = time;
                tat[idx] = ct[idx] - at[idx];
                wt[idx] = tat[idx] - bt[idx];

                awt += wt[idx];
                atat += tat[idx];
                isCompleted[idx] = 1; 
                completed++;
            }
        }
    }

    awt /= n;
    atat /= n;

    // Output process details
    printf("\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", p[i], at[i], bt[i], priority[i], ct[i], tat[i], wt[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", atat);

    // Print Gantt Chart
    printf("\nGantt Chart:\n");
    
    // Print top border
    printf(" ");
    for (i = 0; i < gcIndex; i++) {
        printf("-------");
    }
    printf("\n|");

    // Print process execution sequence
    for (i = 0; i < gcIndex; i++) {
        printf(" P%d |", ganttChart[i]);
    }

    // Print bottom border
    printf("\n ");
    for (i = 0; i < gcIndex; i++) {
        printf("-------");
    }

    // Print time labels
    printf("\n0");
    for (i = 0; i < gcIndex; i++) {
        printf("\t%d", ganttTime[i]);
    }
    printf("\t%d\n", time);

    return 0;
}
================ FILE: NPSJF.c ================
#include <stdio.h>
#include <stdbool.h>

#define MAX 30

int main() {
    int n, i, j, min_bt, min_index;
    int p[MAX], at[MAX], bt[MAX], ct[MAX], wt[MAX], tat[MAX], completed[MAX] = {0};
    float awt = 0, atat = 0;
    int gantt_process[MAX], gantt_time[MAX], gantt_count = 0; // Arrays for Gantt Chart

    // Input: Number of Processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Taking input for process numbers
    printf("Enter the process numbers: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &p[i]);
    }

    // Taking input for arrival times of processes
    printf("Enter the arrival time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &at[i]);
    }

    // Taking input for burst times of processes
    printf("Enter the burst time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
    }

    // Sorting processes based on arrival time using Bubble Sort
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1]) {
                // Swap arrival times
                int temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                // Swap burst times
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                // Swap process IDs
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }

    // Start execution based on SJF logic
    int time = 0, completed_count = 0;
    while (completed_count < n) {
        min_bt = 9999;
        min_index = -1;

        // Find the shortest job available at current time
        for (j = 0; j < n; j++) {
            if (!completed[j] && at[j] <= time) {
                if (bt[j] < min_bt) {
                    min_bt = bt[j];
                    min_index = j;
                }
            }
        }

        if (min_index == -1) {
            // If no process is available, CPU remains idle
            gantt_process[gantt_count] = -1;  // Represent idle state
            gantt_time[gantt_count++] = time;
            time++;
        } else {
            // Execute the selected process
            time += bt[min_index];
            ct[min_index] = time;
            completed[min_index] = 1;
            completed_count++;

            // Store process execution for Gantt Chart
            gantt_process[gantt_count] = p[min_index];
            gantt_time[gantt_count++] = time;
        }
    }

    // Calculate TAT and WT
    for (i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        atat += tat[i];

        wt[i] = tat[i] - bt[i];
        awt += wt[i];
    }

    awt /= n;
    atat /= n;

    // Display Results
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", atat);

    // Print Gantt Chart
    printf("\nGantt Chart:\n");

    // Print upper border
    printf(" ");
    for (i = 0; i < gantt_count; i++) {
        printf("--------");
    }
    printf("\n|");

    // Print process execution
    for (i = 0; i < gantt_count; i++) {
        if (gantt_process[i] == -1) {
            printf(" Idle  |");
        } else {
            printf(" P%d  |", gantt_process[i]);
        }
    }

    // Print lower border
    printf("\n ");
    for (i = 0; i < gantt_count; i++) {
        printf("--------");
    }

    // Print timeline
    printf("\n0");
    for (i = 0; i < gantt_count; i++) {
        printf("\t%d", gantt_time[i]);
    }
    printf("\n");

    return 0;
}
================ FILE: NPPS.c ================
#include <stdio.h>

#define MAX 30

int main() {
    int n, i, j;
    int p[MAX], at[MAX], bt[MAX], ct[MAX], wt[MAX], tat[MAX], priority[MAX];
    float awt = 0, atat = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter process numbers: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &p[i]);
    }

    printf("Enter arrival time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &at[i]);
    }

    printf("Enter burst time for each process: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
    }

    printf("Enter priority for each process (lower number means higher priority): ");
    for (i = 0; i < n; i++) {
        scanf("%d", &priority[i]);
    }

    // Sort processes based on arrival time, then priority if arrival times are the same
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1] || (at[j] == at[j + 1] && priority[j] > priority[j + 1])) {
                // Swap arrival time
                int temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                // Swap burst time
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                // Swap priority
                temp = priority[j];
                priority[j] = priority[j + 1];
                priority[j + 1] = temp;

                // Swap process numbers
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }

    int time = 0, completed = 0;
    int isCompleted[MAX] = {0}; // Track completed processes

    while (completed < n) {
        int minPriority = 9999, idx = -1;

        for (i = 0; i < n; i++) {
            if (at[i] <= time && !isCompleted[i]) {
                if (priority[i] < minPriority) {
                    minPriority = priority[i];
                    idx = i;
                }
            }
        }

        if (idx == -1) {
            time++;
        } else {
            time += bt[idx];
            ct[idx] = time;
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];

            awt += wt[idx];
            atat += tat[idx];
            isCompleted[idx] = 1; 
            completed++;
        }
    }

    awt /= n;
    atat /= n;

    printf("\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", p[i], at[i], bt[i], priority[i], ct[i], tat[i], wt[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", atat);

    printf("\nGantt Chart:\n");
    printf(" ");
    for (i = 0; i < n; i++) {
        printf("-------");
    }
    printf("\n|");

    time = 0;
    for (i = 0; i < n; i++) {
        if (time < at[i]) {
            printf(" Idle |");
            time = at[i];
        }
        printf(" P%d |", p[i]);
        time += bt[i];
    }

    printf("\n ");
    for (i = 0; i < n; i++) {
        printf("-------");
    }

    printf("\n0");
    time = 0;
    for (i = 0; i < n; i++) {
        if (time < at[i]) {
            printf("\t%d", at[i]);
            time = at[i];
        }
        time += bt[i];
        printf("\t%d", time);
    }
    printf("\n");

    return 0;
}
